using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Videoix.Classes
{
    public class ProxyManage2
    {
        public Getproxylist Rep { get; set; }
        public void New()
        {
            var ipClient = new RestClient("https://api.getproxylist.com/proxy");
            var ipRequest = new RestRequest();
            var ipResponse = ipClient.Execute(ipRequest);
            Rep = JsonConvert.DeserializeObject<Getproxylist>(ipResponse.Content);
        }
    }
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using Videoix.Classes;
    //
    //    var getproxylist = Getproxylist.FromJson(jsonString);

    public partial class Getproxylist
    {
        [JsonProperty("_links")]
        public LinksDatum Links { get; set; }

        [JsonProperty("ip")]
        public string Ip { get; set; }

        [JsonProperty("port")]
        public long Port { get; set; }

        [JsonProperty("protocol")]
        public string Protocol { get; set; }

        [JsonProperty("anonymity")]
        public string Anonymity { get; set; }

        [JsonProperty("lastTested")]
        public DateTimeOffset LastTested { get; set; }

        [JsonProperty("allowsRefererHeader")]
        public bool AllowsRefererHeader { get; set; }

        [JsonProperty("allowsUserAgentHeader")]
        public bool AllowsUserAgentHeader { get; set; }

        [JsonProperty("allowsCustomHeaders")]
        public bool AllowsCustomHeaders { get; set; }

        [JsonProperty("allowsCookies")]
        public bool AllowsCookies { get; set; }

        [JsonProperty("allowsPost")]
        public bool AllowsPost { get; set; }

        [JsonProperty("allowsHttps")]
        public bool AllowsHttps { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("connectTime")]
        public string ConnectTime { get; set; }

        [JsonProperty("downloadSpeed")]
        public string DownloadSpeed { get; set; }

        [JsonProperty("secondsToFirstByte")]
        public string SecondsToFirstByte { get; set; }

        [JsonProperty("uptime")]
        public string Uptime { get; set; }

        public partial class LinksDatum
        {
            [JsonProperty("_self")]
            public string Self { get; set; }

            [JsonProperty("_parent")]
            public string Parent { get; set; }
        }

        public static Getproxylist FromJson(string json) => JsonConvert.DeserializeObject<Getproxylist>(json, Videoix.Classes.Converter.Settings);

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }
}
